// Generated by Dagger (https://google.github.io/dagger).
package com.example.androidproject.di.component;

import android.app.Activity;
import android.app.Application;
import android.app.Service;
import android.content.Context;
import androidx.fragment.app.Fragment;
import com.example.androidproject.AndroidHararooApp;
import com.example.androidproject.AndroidHararooApp_MembersInjector;
import com.example.androidproject.data.network.ApiHeader;
import com.example.androidproject.data.network.ApiHelper;
import com.example.androidproject.data.network.AppApiHelper;
import com.example.androidproject.data.network.AppApiHelper_Factory;
import com.example.androidproject.data.network.AppApiHelper_MembersInjector;
import com.example.androidproject.data.preferences.AppPreferenceHelper_Factory;
import com.example.androidproject.data.preferences.PreferenceHelper;
import com.example.androidproject.di.builder.ActivityBuilder_BindMainActivityModule;
import com.example.androidproject.di.module.AppModule;
import com.example.androidproject.di.module.AppModule_ProvideApiHelper$app_debugFactory;
import com.example.androidproject.di.module.AppModule_ProvideApiKey$app_debugFactory;
import com.example.androidproject.di.module.AppModule_ProvideCompositeDisposable$app_debugFactory;
import com.example.androidproject.di.module.AppModule_ProvideContext$app_debugFactory;
import com.example.androidproject.di.module.AppModule_ProvideGsonFactory;
import com.example.androidproject.di.module.AppModule_ProvidePrefHelper$app_debugFactory;
import com.example.androidproject.di.module.AppModule_ProvideProtectedApiHeader$app_debugFactory;
import com.example.androidproject.di.module.AppModule_ProvidePublicApiHeader$app_debugFactory;
import com.example.androidproject.di.module.AppModule_ProvideSchedulerProvider$app_debugFactory;
import com.example.androidproject.di.module.AppModule_ProvideprefFileName$app_debugFactory;
import com.example.androidproject.ui.base.presenter.BasePresenterImpl_MembersInjector;
import com.example.androidproject.ui.main.MainActivityModule;
import com.example.androidproject.ui.main.MainActivityModule_ProvideMainInteractor$app_debugFactory;
import com.example.androidproject.ui.main.MainActivityModule_ProvideMainPresenter$app_debugFactory;
import com.example.androidproject.ui.main.interactor.IMainInteractor;
import com.example.androidproject.ui.main.interactor.MainInteractorImpl;
import com.example.androidproject.ui.main.presenter.IMainPresenter;
import com.example.androidproject.ui.main.presenter.MainPresenterImpl;
import com.example.androidproject.ui.main.presenter.MainPresenterImpl_Factory;
import com.example.androidproject.ui.main.view.IMainView;
import com.example.androidproject.ui.main.view.MainActivity;
import com.example.androidproject.ui.main.view.MainActivity_MembersInjector;
import com.google.gson.Gson;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private AppModule appModule;

  private Application application;

  private Provider<ActivityBuilder_BindMainActivityModule.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<Application> applicationProvider;

  private Provider<Context> provideContext$app_debugProvider;

  private AppModule_ProvideprefFileName$app_debugFactory provideprefFileName$app_debugProvider;

  private Provider<Gson> provideGsonProvider;

  private AppPreferenceHelper_Factory appPreferenceHelperProvider;

  private Provider<PreferenceHelper> providePrefHelper$app_debugProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return Collections
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<? extends Activity>>>emptyMap());
  }

  private DispatchingAndroidInjector<Service> getDispatchingAndroidInjectorOfService() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends Service>, Provider<AndroidInjector.Factory<? extends Service>>>
                emptyMap(),
        Collections.<String, Provider<AndroidInjector.Factory<? extends Service>>>emptyMap());
  }

  private ApiHeader.ProtectedApiHeader getProtectedApiHeader() {
    return AppModule_ProvideProtectedApiHeader$app_debugFactory
        .proxyProvideProtectedApiHeader$app_debug(
            appModule,
            AppModule_ProvideApiKey$app_debugFactory.proxyProvideApiKey$app_debug(appModule),
            providePrefHelper$app_debugProvider.get());
  }

  private ApiHeader.PublicApiHeader getPublicApiHeader() {
    return AppModule_ProvidePublicApiHeader$app_debugFactory.proxyProvidePublicApiHeader$app_debug(
        appModule, application);
  }

  private ApiHeader getApiHeader() {
    return new ApiHeader(getProtectedApiHeader(), getPublicApiHeader());
  }

  private AppApiHelper getAppApiHelper() {
    return injectAppApiHelper(AppApiHelper_Factory.newAppApiHelper(getApiHeader()));
  }

  private ApiHelper getApiHelper() {
    return AppModule_ProvideApiHelper$app_debugFactory.proxyProvideApiHelper$app_debug(
        appModule, getAppApiHelper());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<ActivityBuilder_BindMainActivityModule.MainActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindMainActivityModule.MainActivitySubcomponent.Builder get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.applicationProvider = InstanceFactory.create(builder.application);
    this.provideContext$app_debugProvider =
        DoubleCheck.provider(
            AppModule_ProvideContext$app_debugFactory.create(
                builder.appModule, applicationProvider));
    this.provideprefFileName$app_debugProvider =
        AppModule_ProvideprefFileName$app_debugFactory.create(builder.appModule);
    this.provideGsonProvider =
        DoubleCheck.provider(AppModule_ProvideGsonFactory.create(builder.appModule));
    this.appPreferenceHelperProvider =
        AppPreferenceHelper_Factory.create(
            provideContext$app_debugProvider,
            provideprefFileName$app_debugProvider,
            provideGsonProvider);
    this.providePrefHelper$app_debugProvider =
        DoubleCheck.provider(
            AppModule_ProvidePrefHelper$app_debugFactory.create(
                builder.appModule, appPreferenceHelperProvider));
    this.appModule = builder.appModule;
    this.application = builder.application;
  }

  @Override
  public void inject(AndroidHararooApp hararooApp) {
    injectAndroidHararooApp(hararooApp);
  }

  private AndroidHararooApp injectAndroidHararooApp(AndroidHararooApp instance) {
    AndroidHararooApp_MembersInjector.injectActivityDispatchingAndroidInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    AndroidHararooApp_MembersInjector.injectDispatchingServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    return instance;
  }

  private AppApiHelper injectAppApiHelper(AppApiHelper instance) {
    AppApiHelper_MembersInjector.injectMGson(instance, provideGsonProvider.get());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private AppModule appModule;

    private Application application;

    @Override
    public AppComponent build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends ActivityBuilder_BindMainActivityModule.MainActivitySubcomponent.Builder {
    private MainActivityModule mainActivityModule;

    private MainActivity seedInstance;

    @Override
    public ActivityBuilder_BindMainActivityModule.MainActivitySubcomponent build() {
      if (mainActivityModule == null) {
        this.mainActivityModule = new MainActivityModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements ActivityBuilder_BindMainActivityModule.MainActivitySubcomponent {
    private MainActivityModule mainActivityModule;

    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private MainInteractorImpl getMainInteractorImpl() {
      return new MainInteractorImpl(
          DaggerAppComponent.this.providePrefHelper$app_debugProvider.get(),
          DaggerAppComponent.this.getApiHelper());
    }

    private IMainInteractor getIMainInteractor() {
      return MainActivityModule_ProvideMainInteractor$app_debugFactory
          .proxyProvideMainInteractor$app_debug(mainActivityModule, getMainInteractorImpl());
    }

    private MainPresenterImpl<IMainView, IMainInteractor>
        getMainPresenterImplOfIMainViewAndIMainInteractor() {
      return injectMainPresenterImpl(
          (MainPresenterImpl<IMainView, IMainInteractor>)
              (MainPresenterImpl)
                  MainPresenterImpl_Factory.newMainPresenterImpl(
                      getIMainInteractor(),
                      AppModule_ProvideSchedulerProvider$app_debugFactory
                          .proxyProvideSchedulerProvider$app_debug(
                              DaggerAppComponent.this.appModule),
                      AppModule_ProvideCompositeDisposable$app_debugFactory
                          .proxyProvideCompositeDisposable$app_debug(
                              DaggerAppComponent.this.appModule)));
    }

    private IMainPresenter<IMainView, IMainInteractor>
        getIMainPresenterOfIMainViewAndIMainInteractor() {
      return MainActivityModule_ProvideMainPresenter$app_debugFactory
          .proxyProvideMainPresenter$app_debug(
              mainActivityModule, getMainPresenterImplOfIMainViewAndIMainInteractor());
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          Collections
              .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
                  emptyMap(),
          Collections.<String, Provider<AndroidInjector.Factory<? extends Fragment>>>emptyMap());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivitySubcomponentBuilder builder) {
      this.mainActivityModule = builder.mainActivityModule;
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainPresenterImpl<IMainView, IMainInteractor> injectMainPresenterImpl(
        MainPresenterImpl<IMainView, IMainInteractor> instance) {
      BasePresenterImpl_MembersInjector.injectMGson(
          instance, DaggerAppComponent.this.provideGsonProvider.get());
      return instance;
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectPresenter(
          instance, getIMainPresenterOfIMainViewAndIMainInteractor());
      MainActivity_MembersInjector.injectFragmentDispatchingAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      MainActivity_MembersInjector.injectMGson(
          instance, DaggerAppComponent.this.provideGsonProvider.get());
      return instance;
    }
  }
}
