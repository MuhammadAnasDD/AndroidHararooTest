// Generated by Dagger (https://google.github.io/dagger).
package com.example.androidproject.ui.main;

import com.example.androidproject.ui.main.interactor.IMainInteractor;
import com.example.androidproject.ui.main.interactor.MainInteractorImpl;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class MainActivityModule_ProvideMainInteractor$app_debugFactory
    implements Factory<IMainInteractor> {
  private final MainActivityModule module;

  private final Provider<MainInteractorImpl> mainInteractorImplProvider;

  public MainActivityModule_ProvideMainInteractor$app_debugFactory(
      MainActivityModule module, Provider<MainInteractorImpl> mainInteractorImplProvider) {
    this.module = module;
    this.mainInteractorImplProvider = mainInteractorImplProvider;
  }

  @Override
  public IMainInteractor get() {
    return provideInstance(module, mainInteractorImplProvider);
  }

  public static IMainInteractor provideInstance(
      MainActivityModule module, Provider<MainInteractorImpl> mainInteractorImplProvider) {
    return proxyProvideMainInteractor$app_debug(module, mainInteractorImplProvider.get());
  }

  public static MainActivityModule_ProvideMainInteractor$app_debugFactory create(
      MainActivityModule module, Provider<MainInteractorImpl> mainInteractorImplProvider) {
    return new MainActivityModule_ProvideMainInteractor$app_debugFactory(
        module, mainInteractorImplProvider);
  }

  public static IMainInteractor proxyProvideMainInteractor$app_debug(
      MainActivityModule instance, MainInteractorImpl mainInteractorImpl) {
    return Preconditions.checkNotNull(
        instance.provideMainInteractor$app_debug(mainInteractorImpl),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
