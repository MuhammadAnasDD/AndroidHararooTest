// Generated by Dagger (https://google.github.io/dagger).
package com.example.androidproject;

import android.app.Activity;
import android.app.Service;
import dagger.MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import javax.inject.Provider;

public final class AndroidHararooApp_MembersInjector implements MembersInjector<AndroidHararooApp> {
  private final Provider<DispatchingAndroidInjector<Activity>>
      activityDispatchingAndroidInjectorProvider;

  private final Provider<DispatchingAndroidInjector<Service>> dispatchingServiceInjectorProvider;

  public AndroidHararooApp_MembersInjector(
      Provider<DispatchingAndroidInjector<Activity>> activityDispatchingAndroidInjectorProvider,
      Provider<DispatchingAndroidInjector<Service>> dispatchingServiceInjectorProvider) {
    this.activityDispatchingAndroidInjectorProvider = activityDispatchingAndroidInjectorProvider;
    this.dispatchingServiceInjectorProvider = dispatchingServiceInjectorProvider;
  }

  public static MembersInjector<AndroidHararooApp> create(
      Provider<DispatchingAndroidInjector<Activity>> activityDispatchingAndroidInjectorProvider,
      Provider<DispatchingAndroidInjector<Service>> dispatchingServiceInjectorProvider) {
    return new AndroidHararooApp_MembersInjector(
        activityDispatchingAndroidInjectorProvider, dispatchingServiceInjectorProvider);
  }

  @Override
  public void injectMembers(AndroidHararooApp instance) {
    injectActivityDispatchingAndroidInjector(
        instance, activityDispatchingAndroidInjectorProvider.get());
    injectDispatchingServiceInjector(instance, dispatchingServiceInjectorProvider.get());
  }

  public static void injectActivityDispatchingAndroidInjector(
      AndroidHararooApp instance,
      DispatchingAndroidInjector<Activity> activityDispatchingAndroidInjector) {
    instance.activityDispatchingAndroidInjector = activityDispatchingAndroidInjector;
  }

  public static void injectDispatchingServiceInjector(
      AndroidHararooApp instance, DispatchingAndroidInjector<Service> dispatchingServiceInjector) {
    instance.dispatchingServiceInjector = dispatchingServiceInjector;
  }
}
