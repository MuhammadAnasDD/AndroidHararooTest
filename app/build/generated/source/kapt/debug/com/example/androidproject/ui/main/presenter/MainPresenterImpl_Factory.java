// Generated by Dagger (https://google.github.io/dagger).
package com.example.androidproject.ui.main.presenter;

import com.example.androidproject.ui.base.presenter.BasePresenterImpl_MembersInjector;
import com.example.androidproject.ui.main.interactor.IMainInteractor;
import com.example.androidproject.ui.main.view.IMainView;
import com.example.androidproject.util.SchedulerProvider;
import com.google.gson.Gson;
import dagger.internal.Factory;
import io.reactivex.disposables.CompositeDisposable;
import javax.inject.Provider;

public final class MainPresenterImpl_Factory<V extends IMainView, I extends IMainInteractor>
    implements Factory<MainPresenterImpl<V, I>> {
  private final Provider<I> interactorProvider;

  private final Provider<SchedulerProvider> schedulerProvider;

  private final Provider<CompositeDisposable> disposableProvider;

  private final Provider<Gson> mGsonProvider;

  public MainPresenterImpl_Factory(
      Provider<I> interactorProvider,
      Provider<SchedulerProvider> schedulerProvider,
      Provider<CompositeDisposable> disposableProvider,
      Provider<Gson> mGsonProvider) {
    this.interactorProvider = interactorProvider;
    this.schedulerProvider = schedulerProvider;
    this.disposableProvider = disposableProvider;
    this.mGsonProvider = mGsonProvider;
  }

  @Override
  public MainPresenterImpl<V, I> get() {
    return provideInstance(
        interactorProvider, schedulerProvider, disposableProvider, mGsonProvider);
  }

  public static <V extends IMainView, I extends IMainInteractor>
      MainPresenterImpl<V, I> provideInstance(
          Provider<I> interactorProvider,
          Provider<SchedulerProvider> schedulerProvider,
          Provider<CompositeDisposable> disposableProvider,
          Provider<Gson> mGsonProvider) {
    MainPresenterImpl<V, I> instance =
        new MainPresenterImpl<V, I>(
            interactorProvider.get(), schedulerProvider.get(), disposableProvider.get());
    BasePresenterImpl_MembersInjector.injectMGson(instance, mGsonProvider.get());
    return instance;
  }

  public static <V extends IMainView, I extends IMainInteractor>
      MainPresenterImpl_Factory<V, I> create(
          Provider<I> interactorProvider,
          Provider<SchedulerProvider> schedulerProvider,
          Provider<CompositeDisposable> disposableProvider,
          Provider<Gson> mGsonProvider) {
    return new MainPresenterImpl_Factory<V, I>(
        interactorProvider, schedulerProvider, disposableProvider, mGsonProvider);
  }

  public static <V extends IMainView, I extends IMainInteractor>
      MainPresenterImpl<V, I> newMainPresenterImpl(
          I interactor, SchedulerProvider schedulerProvider, CompositeDisposable disposable) {
    return new MainPresenterImpl<V, I>(interactor, schedulerProvider, disposable);
  }
}
