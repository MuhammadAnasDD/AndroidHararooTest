// Generated by Dagger (https://google.github.io/dagger).
package com.example.androidproject.ui.main;

import com.example.androidproject.ui.main.interactor.IMainInteractor;
import com.example.androidproject.ui.main.presenter.IMainPresenter;
import com.example.androidproject.ui.main.presenter.MainPresenterImpl;
import com.example.androidproject.ui.main.view.IMainView;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class MainActivityModule_ProvideMainPresenter$app_debugFactory
    implements Factory<IMainPresenter<IMainView, IMainInteractor>> {
  private final MainActivityModule module;

  private final Provider<MainPresenterImpl<IMainView, IMainInteractor>> mainPresenterImplProvider;

  public MainActivityModule_ProvideMainPresenter$app_debugFactory(
      MainActivityModule module,
      Provider<MainPresenterImpl<IMainView, IMainInteractor>> mainPresenterImplProvider) {
    this.module = module;
    this.mainPresenterImplProvider = mainPresenterImplProvider;
  }

  @Override
  public IMainPresenter<IMainView, IMainInteractor> get() {
    return provideInstance(module, mainPresenterImplProvider);
  }

  public static IMainPresenter<IMainView, IMainInteractor> provideInstance(
      MainActivityModule module,
      Provider<MainPresenterImpl<IMainView, IMainInteractor>> mainPresenterImplProvider) {
    return proxyProvideMainPresenter$app_debug(module, mainPresenterImplProvider.get());
  }

  public static MainActivityModule_ProvideMainPresenter$app_debugFactory create(
      MainActivityModule module,
      Provider<MainPresenterImpl<IMainView, IMainInteractor>> mainPresenterImplProvider) {
    return new MainActivityModule_ProvideMainPresenter$app_debugFactory(
        module, mainPresenterImplProvider);
  }

  public static IMainPresenter<IMainView, IMainInteractor> proxyProvideMainPresenter$app_debug(
      MainActivityModule instance,
      MainPresenterImpl<IMainView, IMainInteractor> mainPresenterImpl) {
    return Preconditions.checkNotNull(
        instance.provideMainPresenter$app_debug(mainPresenterImpl),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
